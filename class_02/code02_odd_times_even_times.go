package main

import "fmt"

// 练习1. 在数组arr中，有一个数只出现了奇数次，其他数出现了偶数次，打印出这个数
// 题解：根据亦或的性质，偶数次出现的数亦或后的结果是0，假设要找的数是a，0 ^ a
// 仍然是a，所以总结：将所有数亦或到一起，则是最终的结果
func findOddTimesNumber(arr []int) int {
	result := 0
	for _, num := range arr {
		result ^= num
	}
	return result
}

// 练习2. 在数组arr中，有两个数出现了奇数次，其他数出现了偶数次，找出这两个数
// 题解：假设这两个数是a和b，由亦或的性质可以知道，arr中所有数亦或到一起的结果为
// a ^ b，但是如何拆分出a和b呢？
// 假设我们把arr中的数分成两组，相同的数只能进同一组，一组中有a, 一组中有b,那么这
// 两组数就都变成了练习1的情况了，只有1个数出现奇数次，其他数出现偶数次。我们只需要分别把这两组数全部
// 亦或到一起，就求出了a 和 b
//
// 问题又来了，该指定什么规则，能将a和b划分到不同的组去呢？
// 由于 a != b（否则就是同一个数了）所以 a ^ b != 0，也就是说，a ^ b的二进制必然至少有一位是1
// 我们假设第i位是1，则a和b的第i位必然一个是1，一个是0，那么我们将arr中第i为1的分到一组，为0的分到另一组，
// 就实现了我们要的，将a和b分到不同的两组
//
// 问题又来了，我们如何找到这个第i位？而且分组的算法如何实现呢？
// 由于找到任意一个为1的位就行，我们找到最低位第一个为1的位，并构造只有这个位为1的数m
// 将所有的数与m做与运算，如果计算结果变了，则说明该数在i位置是0，否则是1，这样就能将所有数划分到两个组，且
// a 和 b必然会划分到不同的组去
// 比如，假设 a ^ b 是 ... 0 0 1 0 1 0 0，则第2位为1（从0开始数），则m为 ... 0 0 0 0 1 0 0 （十进制是m=4）
// 假如有个数为   ...0 0 0 1 1 0 1 0 0 1 0 1
// 做与运算为    &...0 0 0 0 0 0 0 0 0 1 0 0
// 结果为         ...0 0 0 1 1 0 1 0 0 0 0 1
// 我们发现，与运算只会改变第2位上的数

// 我们如何找到第一个为1的位呢？答案是取反+1再与自身 a & (~a + 1)
// 比如 a 为    0 0 0 1 0 0 1 0 0  a的第一个为1的位是第2位
// 1. a 取反为  1 1 1 0 1 1 0 1 1
// 2. 取反 + 1  1 1 1 0 1 1 1 0 0
// 3. 与自己  & 0 0 0 1 0 0 1 0 0
// 4. 结果    = 0 0 0 0 0 0 1 0 0 我们找到了只有第2位为1的数
// 至此，我们找到了
func findTowOddTimesNumber(arr []int) (int, int) {
	return 0, 0

}

func main() {
	// 5 出现3次，其他数出现偶数次
	arr1 := []int{2, 5, 6, 5, 9, 2, 5, 2, 6, 9, 2}
	fmt.Printf("arr1中出现奇数次的数为：%d\n", findOddTimesNumber(arr1))
}
